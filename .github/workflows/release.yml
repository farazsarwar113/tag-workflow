name: Add Tag

on:
  pull_request:
    types:
      - closed
    branches:
      - 'main'

jobs:
  get-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Print Pull Request Branch Name
        run: |
          echo ${{github.ref}}
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Print Repo Name
        run: |
          echo ${{github.repository}}

      - name: Get Tags of Repo
        id: get-tags
        env:
          GH_TOKEN: ${{ secrets.MY_TOKEN }}
        run: |
          tags="$(gh api repos/${{github.repository}}/git/matching-refs/tags -H 'Accept: application/vnd.github.v3+json' | jq -r '.[].ref' | sed 's/refs\/tags\///g' | sort -V | tail -n 1)"
          echo 'TAGS='$tags >> $GITHUB_ENV

      - name: Print Tags
        run: |
          echo $TAGS

      - name: Split Tag
        id: split-tag
        run: |
          IFS='.' read -ra tag <<< "$TAGS"
          echo "MAJOR=${tag[0]}" >> $GITHUB_ENV
          echo "MINOR=${tag[1]}" >> $GITHUB_ENV
          echo "PATCH=${tag[2]}" >> $GITHUB_ENV

      - name: Increment Patch
        id: increment-patch
        if: ${{ startsWith(github.head_ref, 'hotfix/' ) }}
        run: |
          echo "PATCH=$((PATCH + 1))" >> $GITHUB_ENV

      - name: Increment Minor
        id: increment-minor
        if: ${{startsWith(github.head_ref, 'feature/' )}}
        run: |
          echo "MINOR=$((MINOR + 1))" >> $GITHUB_ENV
          echo "PATCH=0" >> $GITHUB_ENV
      
      - name: Join Major, Minor and Patch
        id: join-tag
        run: |
          echo "TAG=$MAJOR.$MINOR.$PATCH" >> $GITHUB_ENV
      
      - name: get commit sha
        id: get-sha
        run: |
          echo "SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Print SHA
        run: |
          echo $SHA

      - name: Create Tag
        id: create-tag
        env:
          GH_TOKEN: ${{ secrets.MY_TOKEN }}
        run: |
          gh api repos/${{github.repository}}/git/refs -X POST -f ref=refs/tags/$TAG -f sha=$GITHUB_SHA

      - name: Declare Boolean Output
        id: generate-release-notes
        run: |
          echo "::set-output name=GENERATE_RELEASE_NOTES::${{ toJSON(true) }}"

      - name : Print Output
        run: |
          echo ${{ steps.generate-release-notes.outputs.GENERATE_RELEASE_NOTES }}

      - name: Changelog
        uses: Bullrich/generate-release-changelog@master
        id: Changelog
        env:
          REPO: ${{ github.repository }}

      - name: Print Changelog
        run: |
          echo ${{ steps.Changelog.outputs.changelog }}

      - name: Create Release
        id: create-release
        env:
          GH_TOKEN: ${{ secrets.MY_TOKEN }}
        run: |
          gh api repos/${{github.repository}}/releases -X POST -H "Accept: application/vnd.github+json" -f tag_name=$TAG -f name=$TAG -F body=$CHANGELOG
